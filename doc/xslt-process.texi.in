\input texinfo  @c -*-Texinfo-*-
@setfilename xslt-process.info
@settitle XSLT-process minor mode

@include version.texi

@ifinfo
@dircategory Miscellaneous
@direntry
* XSLT-process::                  XSLT processing and debugging within Emacs.
@end direntry

This file documents the features of the XSLT-process minor mode.

Copyright (C) 2000--2001 Ovidiu Predescu
All rights reserved.

Distributed under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

@sp 2

The XSLT-process minor mode manual may be reproduced and distributed in
whole or in part, in any medium, physical or electronic, so long as this
copyright notice remains intact and unchanged on all copies.
@end ifinfo

@titlepage
@title XSLT-process minor mode
@subtitle for version @value{version}
@subtitle @value{update-month}
@author by Ovidiu Predescu
@page
@vskip 0pt plus 1filll
Copyright @copyright{} 2000, 2001 Ovidiu Predescu.
@par All rights reserved.

@sp 1

Distributed under the terms of the
@uref{http://www.gnu.org/copyleft/gpl.html, GNU General Public License}
as published by the @uref{http://www.fsf.org/, Free Software
Foundation}; either version 2 of the License, or (at your option) any
later version.

@sp 1

The @emph{XSLT-process} minor mode manual may be reproduced and
distributed in whole or in part, in any medium, physical or electronic,
so long as this copyright notice remains intact and unchanged on all
copies.
@end titlepage

@node top, What is it?, (dir), (dir)
@comment  node-name,  next,  previous,  up

@menu
* What is it?::                 
* Installation and setup::      
* Running an XSLT processor::   
* Debugging an XSLT stylesheet::  
* Customizing the XSLT-process mode::  
* Known problems::              
* Future enhancements::         

@detailmenu
 --- The Detailed Node Listing ---

Installation and setup

* Package installation under XEmacs::  
* Generic installation::        
* Setting up XSLT-process::     

Generic installation

* Installing Speedbar::         
* Installing XSLT-process::     

Running an XSLT processor

* Setting up the XSLT processor::  
* Viewing the results of the XSLT processing::  

Debugging an XSLT stylesheet

* Entering the debug mode::     
* Breakpoints::                 
* Controlling the debugger::    

@end detailmenu
@end menu

@ifinfo
This document describes XSLT-process, a minor mode for XEmacs/GNU Emacs
that enables it for XSLT processing and debugging.
@end ifinfo



@c =========================================================================
@node What is it?, Installation and setup, top, top
@comment  node-name,  next,  previous,  up
@chapter What is it?

@emph{XSLT-process} is a minor mode for XEmacs or GNU Emacs which
transforms it into a powerful XML editor with XSLT processing and
debugging capabilities.

You can invoke an XSLT processor of choice on the current XML file
you're editing, and see the results in another buffer. In case of
errors, the error messages generated by the XSLT processor, are shown in
a compilation buffer, which allows you to quickly go to the location of
the error.

You can also run the XSLT processor in debugging mode, and view step by
step what the XSLT processor is doing. You can view the current stack
frame in the XSLT program, the current XML context node being processed,
what are the local and global variables, set breakpoints in both the XML
source file and the XSLT program.

@html
<a href="http://sourceforge.net/projects/xslt-process/"> <img
src="sflogo.png" width="88" height="31" border="0" alt="SourceForge
Logo"></a>
@end html

The author of the @emph{XSLT-process} package is
@email{ovidiu@@xemacs.org, Ovidiu Predescu}, and the package is
distributed under the terms of
@uref{http://www.gnu.org/copyleft/gpl.html, GNU General Public
License}. The project is graciously hosted by SourceForge, and could be
found at @uref{http://sourceforge.net/projects/xslt-process/,
http://sourceforge.net/projects/xslt-process/}. The current version is
@value{version}.

@c =========================================================================
@node Installation and setup, Running an XSLT processor, What is it?, top
@comment  node-name,  next,  previous,  up
@chapter Installation and setup

The @emph{XSLT-process} mode is part of XEmacs, but it works with both
XEmacs and GNU Emacs. The installation differs slighly between the two
editors as we will see shortly.

@menu
* Package installation under XEmacs::  
* Generic installation::        
* Setting up XSLT-process::     
@end menu

@c =========================================================================
@node Package installation under XEmacs, Generic installation, Installation and setup, Installation and setup
@comment  node-name,  next,  previous,  up
@section Package installation under XEmacs

@emph{XSLT-process} is also released as an XEmacs package, so if you're
an XEmacs user, chances are that the package is already installed with
your XEmacs installation. If it's not installed, try obtaining the
latest XEmacs package from your XEmacs local mirror or from the main
XEmacs ftp site. It may happen that the XEmacs package is a little older
than the currently released version of @emph{XSLT-process}, in which
case you want to follow the steps described below.

You can retrieve the XEmacs package either manually from the ftp site,
or by using the ``Options'' @result{} ``Manage packages''
menu. Follow the instructions described under the ``Options''
@result{} ``Manage packages'' @result{} ``Help'' menu entry if
you're not familiar with this procedure.

@c =========================================================================
@node Generic installation, Setting up XSLT-process, Package installation under XEmacs, Installation and setup
@comment  node-name,  next,  previous,  up
@section Generic installation

This section describes how to install @emph{XSLT-process} on your Emacs
editor, assuming either it is not already installed, or you want to
install a new version.

@menu
* Installing Speedbar::         
* Installing XSLT-process::     
@end menu

@c =========================================================================
@node  Installing Speedbar, Installing XSLT-process, Generic installation, Generic installation
@comment  node-name,  next,  previous,  up
@subsection Installing Speedbar

@emph{XSLT-process} depends on another package, @emph{Speedbar}, for
displaying breakpoints, stack frames and global and local variables. You
need to obtain and install this package first, in case you don't have it
already installed.

To verify if you have this package installed, type @kbd{M-x
speedbar-version}; this will give either an error, if the package is not
installed, or the version number of the @emph{speedbar} package if it's
already installed. You should have at least version 0.13 for
@emph{XSLT-process} to work.

In case you don't have the @emph{speedbar} package, you can obtain it
from its @uref{http://cedet.sourceforge.net/speedbar.shtml,Web
site}. Unpack the package in your @kbd{~/emacs} directory. If you don't
have a @kbd{~/emacs} directory, create one now. Then go to the speedbar
directory and run

@example
$ make
@end example

If you're using XEmacs, you need to run:

@example
$ make EMACS=xemacs
@end example

This step byte-compiles all the Lisp files in the @emph{speedbar}
package using your Emacs editor. Please follow Speedbar's installation
document for more up-to-date information on how to compile it.

@c =========================================================================
@node  Installing XSLT-process,  , Installing Speedbar, Generic installation
@comment  node-name,  next,  previous,  up
@subsection Installing @emph{XSLT-process}

To install the @emph{XSLT-process} mode, first obtain the latest stable
version from the SourceForge Web site, at
@uref{http://sourceforge.net/projects/xslt-process/,
http://sourceforge.net/projects/xslt-process/}. Unpack the distribution
in your @kbd{~/emacs} directory; this will create the
@kbd{xslt-process-@value{version}} directory in your @kbd{~/emacs}
directory.

You now need to tell Emacs to look for the new package in this newly
created directory. You do this by adding the following lines in the
Emacs configuration file @kbd{~/.emacs} (if you don't have such a file,
create one now):

@example
(mapc (lambda (x)
        (pushnew (expand-file-name x) load-path))
      (list "~/emacs"
            "~/emacs/xslt-process-@value{version}/lisp"
            "~/emacs/speedbar-0.13"))
@end example

You can remove the reference to @kbd{speedbar-0.13} in the lines above,
if you didn't have to install @emph{speedbar} as described in the
previous section (@ref{Installing Speedbar}).

@c =========================================================================
@node  Setting up XSLT-process,  , Generic installation, Installation and setup
@comment  node-name,  next,  previous,  up
@section Setting up the @emph{XSLT-process} mode

@cindex PSGML
@cindex sgml-mode.el
@cindex xslide
@emph{XSLT-process} is an Emacs minor mode, which means is extending the
functionality of whatever mode you use for editing XML or XSLT files,
instead of creating a similar one.

@emph{XSLT-process} does not try to help in the editing of XML or XSLT
files, it just enables Emacs to process such files. Thus
@emph{XSLT-process} should work with any XML/XSLT editing mode your
Emacs is configured for.

@emph{XSLT-process} was tested with both Lennart Staflin's
@uref{http://sourceforge.net/projects/psgml,PSGML major mode} and James
Clark's @emph{sgml-mode.el} major mode (distributed with GNU Emacs) for
editing XML files. It also works with Tony Graham's
@uref{http://sourceforge.net/projects/xslide,xslide} XSLT editing mode.

To automatically enable the @emph{XSLT-process} minor mode for the above
major modes, add the following lines in your @kbd{~/.emacs} file:

@example
(autoload 'xslt-process-mode "xslt-process" "Emacs XSLT processing" t)
(add-hook 'sgml-mode-hook 'xslt-process-mode)
(add-hook 'xml-mode-hook 'xslt-process-mode)
(add-hook 'xsl-mode-hook 'xslt-process-mode)
@end example

You can also manually switch to this minor mode by typing @kbd{M-x
xslt-process-mode}.

You can check the modeline to see whether Emacs is in the
@emph{XSLT-process} mode. Look for the ``XSLT'' indicator in the
modeline.

@ifnotinfo
@c @sp 1
@image{xslt-mode}
@end ifnotinfo

@c =========================================================================
@node  Running an XSLT processor, Debugging an XSLT stylesheet, Installation and setup, top
@comment  node-name,  next,  previous,  up
@chapter Running an XSLT processor

@menu
* Setting up the XSLT processor::  
* Viewing the results of the XSLT processing::  
@end menu

@c =========================================================================
@node  Setting up the XSLT processor, Viewing the results of the XSLT processing, Running an XSLT processor, Running an XSLT processor
@comment  node-name,  next,  previous,  up
@section Setting up the XSLT processor

The @emph{XSLT-process} mode comes by default with two different Java
XSLT processors, Saxon and Xalan. These particular versions of the XSLT
processors were tested and work with the @emph{XSLT-process}
mode. Different versions of the processors may not work with the
@emph{XSLT-process} mode.

You can choose either of the above processors to do the XSLT processing
by selecting one from the ``XSLT'' @result{} ``XSLT Processor''
menu. The default XSLT processor is Saxon.

@ifnotinfo
@c @sp 1
@image{processors}
@end ifnotinfo

@c =========================================================================
@node Viewing the results of the XSLT processing,  , Setting up the XSLT processor, Running an XSLT processor
@comment  node-name,  next,  previous,  up
@section Viewing the results of the XSLT processing

The main functionality of the @emph{XSLT-process} mode is to allow you
to edit an XML document, apply an XSLT stylesheet on the document, and
view the results either in a buffer or in Web browser.

@ifnotinfo
@c @sp 1
@image{apply-xslt}
@end ifnotinfo

To run the XSLT processor and view the results in another Emacs buffer,
you can enter @kbd{C-c C-x v}, while editing the XML
document. Similarly, to view the results in a Web browser, type @kbd{C-c
C-x n}. The Web browser used could be customized as described in
@ref{Customizing the XSLT-process mode}. If you don't like the default
key bindings described above, you can also customize them as described
in the same chapter.

@c =========================================================================
@node  Debugging an XSLT stylesheet, Customizing the XSLT-process mode, Running an XSLT processor, top
@comment  node-name,  next,  previous,  up
@chapter Debugging an XSLT stylesheet

For relatively simple XSLT stylesheets, understanding how a particular
stylesheet works can be done by repeteadly running the XSLT processor,
and looking at the results. More complex stylesheets however, are
difficult to debug this way, especially when you have lots of XSL
variables and key indices.

@emph{XSLT-process} gives you the ability to run the processor in
debugging mode, which allows you to set breakpoints, run step by step,
view local and global XSLT variables.

@strong{Note:} This release supports debugging only with the Saxon XSLT
processor. Xalan requires line number support for the XML source
document; I have a patch for the 2.1.0 release, but I'm told the Stree
tree model this release uses is going away in the next release. So I
started to work on a patch for the new release which uses the so-called
DTM tree model.

@menu
* Entering the debug mode::     
* Breakpoints::                 
* Controlling the debugger::    
@end menu

@c =========================================================================
@node  Entering the debug mode, Breakpoints, Debugging an XSLT stylesheet, Debugging an XSLT stylesheet
@comment  node-name,  next,  previous,  up
@section Entering the debug mode

While you're editing an XML or XSLT file, the buffer visiting the file
is read-write, allowing you to perform the normal editing operations,
and use the functionality specific to the XML/XSLT/SGML mode you're
using.

The XSLT debugging mode however does not allow you to modify files, and
it binds some of the keys to debugger specific functionality. The XSLT
debugging functionality is a per buffer feature, you can enable and
disable it for each buffer independently.

To toggle the XSLT debugging functionality, type @kbd{C-c C-x d} while
you're in a @emph{XSLT-process} mode buffer. You can also toggle the
debug mode through the menu at ``XSLT'' @result{} ``Toggle debug
mode''. Once you enter the debug mode, you will notice the modeline
indicator changes from ``XSLT'' to ``XSLTd''.

@ifnotinfo
@c @sp 1
@image{xsltd-mode}
@end ifnotinfo

In the menu, you will observe that until the debug functionality is not
enabled, all the debugger related operations in the menu are
disabled. Once you enable the debug mode, you will be able to setup
breakpoints and run the XSLT debugger.

@ifnotinfo
@c @sp 1

@multitable @columnfractions 0.5 0.5

@item
@image{xslt-menu}
@tab
@image{xsltd-menu}

@item
No debug menu: the debugging functionality is not enabled.
@tab
XSLT debug menu: debugging functionality enabled.
@end multitable

@end ifnotinfo

@c =========================================================================
@node  Breakpoints, Controlling the debugger, Entering the debug mode, Debugging an XSLT stylesheet
@comment  node-name,  next,  previous,  up
@section Breakpoints

Once you're in the XSLT debugging mode, you can set or delete, enable or
disable breakpoints. During the execution of the XSLT stylesheet, the
XSLT processor will stop when it reaches a breakpoint that is enabled.

The keybindings for breakpoints are:

@itemize @bullet

@item @kbd{b}:
Set a new breakpoint at the line containing point. Doesn't do anything
if a breakpoint is already setup at this location.

The corresponding menu item is disabled if the point is on a line where
a breakpoint is already set.

@item @kbd{d}:
Delete the breakpoint at the line containing point. Nothing happens if
no breakpoint is setup on the line at point.

The corresponding menu item is disabled if the point is on a line where
there is no breakpoint.

@item @kbd{e}:
Enable or disable the breakpoint at the line containing point. If there
is no breakpoint setup at point, nothing happens. If the breakpoint is
enabled, this action will disable it. Similarly, if the breakpoint is
disabled, this action will enable it.

The corresponding menu item is disabled if the point is on a line where
there is no breakpoint.

@end itemize

You can setup breakpoints both in the source XML document, and in the
XSLT stylesheet program. Note however that the semantic of a breakpoint
in the source document is very different from a breakpoint in the XSLT
stylesheet. The XSLT processor will stop at a breakpoint in the source
document only when an element on that line is @dfn{selected}, e.g. when
the element becomes the current context node (see the
@uref{http://www.w3c.org/TR/XSLT,XSLT} specification). Compare this with
the XSLT stylesheet, which is essentially a program, and where the stop
at a breakpoint means that the execution of the program reached the
instruction at that line.

@c =========================================================================
@node  Controlling the debugger,  , Breakpoints, Debugging an XSLT stylesheet
@comment  node-name,  next,  previous,  up
@section Controlling the debugger

After you setup the breakpoints where you would like the XSLT processor
to stop, you can start the XSLT processing. You do this from the menu at
``XSLT'' @result{} ``Run debugger'', or by typing @kbd{r}. The XSLT
processor will start at this point and it will continue working in the
background until it reaches an enabled breakpoint.

At this point, Emacs will display the line where the XSLT processor has
stopped.

The XSLT processing happens in a separate process from Emacs, so you can
still do useful work if the processing takes a long time.

@c =========================================================================
@node  Customizing the XSLT-process mode, Known problems, Debugging an XSLT stylesheet, top
@comment  node-name,  next,  previous,  up
@chapter Customizing the @emph{XSLT-process} mode

@c =========================================================================
@node  Known problems, Future enhancements, Customizing the XSLT-process mode, top
@comment  node-name,  next,  previous,  up
@chapter Known problems

The following is a list of differences between GNU Emacs and XEmacs. As
the @emph{XSLT-process} mode is developed under XEmacs, I would
appreciate your support in making the GNU Emacs version behave closer to
the XEmacs one.

@itemize @bullet

@item
Under GNU Emacs, the keybinding for a command does not appear in the
menu item as they appear under XEmacs.

@end itemize

@c =========================================================================
@node  Future enhancements,  , Known problems, top
@comment  node-name,  next,  previous,  up
@chapter Future enhancements

This is a list of features planned for future releases. The list doesn't
specify any particular order in the priority, and the features may or
may not be implemented.

@itemize @bullet

@item
Add ability to evaluate XPath expressions. The context node could be
either the top node of the XML document or it can be specified by
putting the point on it.

This would be a very useful tool for novice XSLT users to learn XPath
(and Emacs ;-).

@item
Maintain a list of XSLT stylesheets, managed by the user, and specify
the stylesheet to be applied on an XML document from this list. This
eliminates the need to have an @samp{xml-stylesheet} processing
instruction in the XML document, that specifies the XSLT stylesheet to
be applied.

@item
Add the ability to process and debug JSPs and Cocoon's XSP. This would
be very useful and would improve the overall edit-run-debug process for
these applications substantially.

@end itemize

@contents

@bye
