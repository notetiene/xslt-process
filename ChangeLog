2001-04-17  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Define the version, various email
	addresses and the public Web site. Added support for specifying
	the desired XSLT processor through the menus. Rearranged the state
	variables. Added menu entries for customization and for viewing
	various information. Added support for submitting bug
	reports. Fixed the way the output buffer is chosen when output
	from the XSLT process occurs.

	* lisp/xslt-speedbar.el: Require speedbar right at the top of the
	file.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Set the outStream
	on the manager instance.

	* java/xslt/debugger/cmdline/Controller.java (createXSLTDebugger):
	Removed superfluous messages.

	* java/xslt/debugger/Manager.java: outStream is not setup in this
	class instead of being setup in a debugger instance.

	* java/xslt/debugger/AbstractXSLTDebugger.java: Moved the
	outStream instance variable to Manager.

	* Makefile: The version of the package now lives in the
	lisp/xslt-process.el file. The update date in
	doc/xslt-process.texi is now generated automatically.
	* doc/Makefile: Likewise.

	* doc/xslt-process.texi: Take the version and update-month
	variables from version.texi, an automatically generated file.

	* doc/.cvsignore: Added version.texi.

2001-04-16  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Pass in the classpath the java/ directory
	instead of the xslt.jar. In xslt-process-start-debugger-process
	invoke the appropriate command, either 'run' or 'debug', to
	execute the XSLT processor. Upon the initial invocation pass the
	default XSLT processor.

	* java/xslt/debugger/saxon/XSLTDebugger.java: Added
	getTransformerFactory and prepareTransformerForDebugging
	methods. Commented out the run method.
	* java/xslt/debugger/xalan/XSLTDebugger.java: Likewise.
	
	* java/xslt/debugger/cmdline/Controller.java: Added the `run'
	command to handle the XSLT processing directly.

	* java/xslt/debugger/Manager.java: Handle both processing and
	debugging of XSLT stylesheets.

	* java/xslt/debugger/AbstractXSLTDebugger.java: Correctly handle
	synchronization issues. Use the run() both for debugging and
	processing the stylesheet directly.

	* java/Makefile: Correctly build the jar file.

2001-04-15  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* samples/books.xsl: Commented out the saxon:group elements.

	* lisp/xslt-process.el: No longer uses BSH to invoke the XSLT
	processor. Use instead the same command line XSLT process used for
	debugging.
	
	Added the ability to specify which XSLT engine to be used.
	
	Temporarily drop support for Cocoon until I figure out a way to do
	debugging in the Cocoon environment (if implemented, this would be
	I killer app!).

	* java/xslt/debugger/saxon/XSLTDebugger.java: Create a new
	instance using the 'new' operator instead of newInstance().
	* java/xslt/debugger/xalan/XSLTDebugger.java: Likewise.
	
	* java/xslt/debugger/Manager.java: Added the ability to deal with
	multiple JAXP transformers without having to restart the XSLT
	debugger process.

	* java/xslt/debugger/AbstractXSLTDebugger.java: Start moving the
	functionality from XSLTDebugger classes in this class.

	* java/Makefile: Added.

	* Makefile: Move the responsibility of compiling the Java classes
	and building the jar file in the makefile in the java/ directory.

2001-04-12  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* java/xslt/debugger/xalan/XSLTDebugger.java: Created.

	* lisp/xslt-process.el: Send the 'debug' command instead or 'r' to
	run the XSLT debugger.

	* java/xslt/debugger/saxon/XSLTDebugger.java: Create an instance
	of the Saxon's TransformerFactoryImpl explicitly.

	* java/xslt/debugger/cmdline/Controller.java: Renamed the run
	method to 'debug'. Added the 'set' and 'show' methods. Create the
	XSLT debugger instance based on the processor name that's set at
	runtime.

	* java/xslt/debugger/Manager.java: Set the processor name in the
	debugger instance.

	* java/xslt/debugger/AbstractXSLTDebugger.java: Added
	processorName and accessor methods.

2001-04-11  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* java/saxon-6.2.2-fix.jar: Added.
	
	* lisp/xslt-speedbar.el: Added xslt-process-selected-style-frame
	to point to the last selected style frame.
	
	Added xslt-process-speedbar-current-line-face, face for displaying
	the current line in the speedbar.
	
	(xslt-process-speedbar-change-style-frame): New function to select the
	line of the selected style frame.
	
	(xslt-process-speedbar-show-style-frames-stack): Invoke the
	xslt-process-speedbar-change-style-frame function when an item in
	the speedbar is clicked. Display the speedbar style frame item
	with appropriate face. Pass the index of the frame to this
	function.

	* lisp/xslt-process.el: Renamed
	xslt-process-last-selected-position-filename to
	xslt-process-style-selected-position-filename. Modified to account
	for the frame object now being an array rather than a list. Added
	xslt-process-frame-is-exiting? and xslt-process-frame-position.
	
	Moved functionality from do-quit to
	xslt-process-debugger-buffer-killed. do-quit now calls this
	method. The buffer-killed function now calls
	xslt-process-processor-finished.
	
	(xslt-process-processor-finished): Reset the source and style frames
	stack and invoke the hooks.
	
	(xslt-process-results-process-filter): Simplified, no longer use
	markers.

	* java/xslt/debugger/saxon/SaxonTraceListener.java (leave): Mark
	the frame as exiting.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Generate arrays
	instead of lists for faster access. Add isExiting and position in
	the frame array.

	* java/xslt/debugger/StyleFrame.java: Added isExiting.
	* java/xslt/debugger/SourceFrame.java: Likewise.

2001-04-09  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-speedbar.el: Added some key bindings in the speedbar's
	keymap for the XSLT debugger. Correctly handle showing of the
	style frames in speedbar.

	* lisp/xslt-process.el: Added
	xslt-process-debugger-process-started to indicate whether the XSLT
	debugger process is started or not. Use this variable to change
	the status of the "Quit debugger" menu item.
	
	Added source and style frames stack variables and support for
	them.
	
	Use no buffer for the Emacs process communication with the XSLT
	debugger. Use a filter function to insert into the output
	buffer. This way killing this buffer doesn't affect in any way the
	connection with the debugger process.
	
	Temporarily make the results buffer writable so it can be erased.
	
	Reset the state of the source and style frames, and of the
	xslt-process-debugger-process-started variables when the debugger
	process dies.
	
	Removed unnecessary comments and commented out `message' calls.

	* java/xslt/debugger/saxon/SaxonTraceListener.java: Removed
	printing of debug messages.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Remove the
	superfluous newlines.

	* java/xslt/debugger/StyleFrame.java: Remove the file: URI method
	if present.

	* java/xslt/debugger/SourceFrame.java: Remove the file: URI method
	if present.

2001-04-08  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-speedbar.el: Graciously handle setting, deleting,
	enabling, and disabling of breakpoints: they are now updated in
	the speedbar. Added configurable faces for these colors.

	* lisp/xslt-process.el: Added hooks to be invoked when breakpoint
	operations happen, and source and style frames change. Added
	speedbar entry in the XSLT menu. Reimplement
	xslt-process-output-from-process to handle partial output from the
	XSLT debugger process; this still needs more work.

	* java/xslt/debugger/saxon/SaxonTraceListener.java: Send the
	sourceStackChanged and styleStackChanged messages if the
	appropriate stack frames change.

	* java/xslt/debugger/saxon/SaxonStyleFrame.java: Removed the
	localVariables instance variables; use instead the inherited one.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Implemented
	sourceStackChanged and styleStackChanged.

	* java/xslt/debugger/cmdline/Controller.java: Added
	getManager. Added help line for the sbt command.

	* java/xslt/debugger/cmdline/CmdLineObserver.java: Added
	implementations for sourceStackChanged and styleStackChanged
	methods.

	* java/xslt/debugger/StyleFrame.java: Added clone, equals,
	hashCode, getFilename and getLine methods.

	* java/xslt/debugger/SourceFrame.java: Added clone, equals and
	hashCode, getFilename and getLine methods.

	* java/xslt/debugger/Observer.java: Added sourceStackChanged and
	styleStackChanged methods. Documented methods.

	* java/xslt/Xalan1.java: Prefix filename with the file: URI.

	* java/xslt/Saxon.java: Prefix filename with the file: URI.

2001-04-05  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Removed debug messages.

	* lisp/xslt-process.el: Cleaned up the highlighting code by
	putting the common functionality in a single function.

2001-04-04  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-speedbar.el: Got the breakpoints to correctly expand
	and unexpand in the speedbar. Need to implement auto-updating of
	the breakpoints list when the users sets up a new breakpoint, and
	to handle the case when the buffer containing the breakpoint
	disappears.

	* lisp/xslt-process.el: In xslt-process-get-file-buffer open the
	file and return the buffer that holds the file.

2001-04-03  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Added test code for the speedbar support.

2001-04-02  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Removed the make-variable-buffer-local
	calls from inside xslt-process-mode. Grouped the functions based
	on how they get invoked.

	* Makefile: Changed the rules for compiling the Java files.

	* java/xslt/debugger/saxon/SaxonTraceListener.java: Print the
	entering and exiting messages followed by a colon to be able to
	match them in Emacs.

	* lisp/xslt-process.el: Create a TCP/IP connection to the XSLT
	debugger process to get the results of the processing separate
	from stdin. Now the XSLT results go in a separate buffer.

	Line indicators to show whether the debugger is entering in or
	exiting from an element. Fixed (most of) the problems when
	toggling back and forth in debug mode and in the xslt-process
	mode.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Added the support
	code for creating the server socket and passing it to the Emacs
	process.

	* java/xslt/debugger/cmdline/Controller.java: Added getDebugger().

2001-04-01  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Setup keybindings for the stop and quit
	actions.
	
	Correctly handle, by making the minor-mode-alist buffer local,
	different minor mode line strings in distinct buffers.
	
	Added execution-context-error-function as function hook to be
	called when an error message is reported.
	
	Remove the XSLT-process mode from a file, when xslt-process-mode
	is invoked with a negative argument. The menu is correctly removed
	now.
	
	Restarting the XSLT debugger now asks the user. All the step,
	next, continue and finish actions now check for the current state
	of the XSLT debugger before doing anything.
	
	Quit now asks the user whether to delete the breakpoints from the
	source files.
	
	Graciously reset the Emacs' state variables when the XSLT process
	buffer is killed.

	* java/xslt/debugger/saxon/XSLTDebugger.java: Setup the
	StreamResult based on the outStream instance variable. Don't close
	the output stream after the processing is complete.

	* java/xslt/debugger/cmdline/Controller.java: Pass the Controller
	instance in the Observer's constructor.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Implement
	debuggerProcessStarted(). Pass the Controller instance in the
	constructor.

	* java/xslt/debugger/cmdline/CmdLineObserver.java: Implement
	debuggerProcessStarted().

	* java/xslt/debugger/Observer.java: Added debuggerProcessStarted.

	* java/xslt/debugger/AbstractXSLTDebugger.java: Use an output
	stream instead of an output file name. This allows a socket stream
	to be set up for outputting the result of the XSLT processing.

2001-03-30  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Better handling of menu items enabling and
	disabling. Added initial support for restarting the XSLT debugger
	process. Correctly handle unhighlighting of breakpoints. Print
	notification message when the XSLT processor finishes processing
	or when it encounters an error.

	* java/xslt/debugger/saxon/XSLTDebugger.java: Invoke the observer
	instance to handle errors.

	* java/xslt/debugger/saxon/SaxonTraceListener.java: Comment out
	unnecessary printlns.

	* java/xslt/debugger/cmdline/Controller.java: Removed the code to
	handle the restarting during a processor run. Expect this to
	happen in the front-end code, where there's much more control.

	* java/xslt/debugger/Observer.java: Added processorFinished and
	caughtException.
	* java/xslt/debugger/cmdline/CmdLineObserver.java: Likewise.
	* java/xslt/debugger/cmdline/EmacsObserver.java: Likewise.

	* lisp/xslt-process.el: Start the XSLT debugger in Emacs
	mode. Handle Emacs formatted output from the debugger. Now handles
	step, next and continue operations in an XSLT debug mode
	buffer. Automatically opens debugged files not present in Emacs
	and switch them to the XSLT debug mode.

	* java/xslt/debugger/cmdline/Controller.java: Allow specifying the
	processor to be used and whether notifications should be formatted
	for Emacs.

	* java/xslt/debugger/cmdline/EmacsObserver.java: Prints messages
	formatted such that they contain code that can be executed
	directly by Emacs.

2001-03-28  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Correctly display the mode
	indicator. Breakpoint related functions reworked.

2001-03-24  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* java/xslt/debugger/saxon/SaxonTraceListener.java: Fixed the next
	operation.

2001-03-22  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* java/xslt/debugger/saxon/SaxonValue.java: Use SaxonType to store
	the type of the value.

	* java/xslt/debugger/saxon/SaxonStyleFrame.java: Fixed typos in
	getGlobalVariables() and getLocalVariables().

2001-03-06  Ovidiu Predescu  <ovidiu@cup.hp.com>

	Started the work on XSLT debugging support.
	
	* java/xslt/debugger/saxon/XSLTDebugger.java: Added.

	* java/xslt/debugger/Debugger.java: Added support code for
	creating the back-end.

	* java/xslt/debugger/XSLTDebuggerIntf.java: Added.

	* java/xslt/debugger/Variable.java: Added.

	* java/xslt/debugger/Observer.java: Added.

	* java/xslt/debugger/Frame.java: Added.

	* java/xslt/debugger/Debugger.java: Added.

	* java/xslt/debugger/Breakpoint.java: Added.

2001-02-26  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* doc/xslt-process.texi: Added new TODO item: Add check to observe
	changes in the Java additional classpath and restart BSH if such
	changes occur while it's running.

Thu Feb 15 01:22:23 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* doc/xslt-process.texi: Reorganized and enhanced the
	documentation.

Sun Feb 11 23:51:24 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* doc/xslt-process.texi: Updated with the latest changes.

	* lisp/xslt-process.el: Move the customization in the programming
	tools submenu.

	* java/xslt/TrAX.java: Added the ability to use a cache with the
	file URL protocol.

Fri Feb  9 09:55:22 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* TODO: Updated.

	* java/xslt/TrAX.java: Added support for cached
	stylesheets. Currently only http: URIs seem to be handled well,
	but file: will follow soon. It looks like the FTP support does not
	work.

Wed Feb  7 19:47:20 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Renamed Xalan2 to TrAX as the support code
	works with any TrAX processor.

Thu Jan  4 01:23:25 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* doc/xslt-process.texi: Updated the documentation for the 1.1
	release.

Wed Jan  3 23:37:15 2001  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Added xslt-process-additional-classpath to
	allow passing additional classpath arguments to BSH (suggestion
	from T.V. Raman <tvraman@almaden.ibm.com>).

Fri Dec 15 00:29:44 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Handle user agent specification for
	Cocoon.
	* java/xslt/Cocoon1.java: Handle user agent specification.

Thu Dec 14 22:45:43 2000  Ovidiu Predescu  <ovidiu@cup.hp.com>

	* lisp/xslt-process.el: Always display error messages in a buffer,
	even when applying the stylesheet fails because of JVM startup
	problems.
